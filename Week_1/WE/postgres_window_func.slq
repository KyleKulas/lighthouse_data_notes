SELECT * FROM training.products

SELECT avg(price) FROM training.products


SELECT product_groups.group_name, avg(price) FROM training.products
Join  training.product_groups USING (group_id)
GROUP BY group_name;


/*Window function*/

SELECT product_name, price, group_name, AVG(price) OVER (
    PARTITION BY group_name
    )
FROM
    training.products
    INNER JOIN 
        product_groups USING (group_id);



SELECT
    product_name,
    group_name,
    price,
    ROW_NUMBER () OVER (
        PARTITION BY group_name
        ORDER BY 
            price
    )
FROM
    training.products
INNER JOIN product_groups USING (group_id);

SELECT
    product_name,
    group_name,
    price,
    RANK() OVER (
        PARTITION BY group_name
        ORDER BY
            price
    )
FROM
    training.products
INNER JOIN product_groups USING (group_id);

SELECT 
    product_name,
    group_name,
    price,
    DENSE_RANK () OVER (
        PARTITION BY group_name
        ORDER BY
            price
    )
FROM
    training.products
INNER JOIN product_groups USING (group_id);


/* lowest price in group */
SELECT 
    product_name,
    group_name,
    FIRST_VALUE(price) OVER (
        PARTITION BY group_name
        ORDER BY 
            price
    ) AS lowest_price_per_group
FROM
    training.products
INNER JOIN product_groups USING (group_id);

SELECT
	product_name,
	group_name,
	price,
	LAST_VALUE (price) OVER (
		PARTITION BY group_name
		ORDER BY
			price RANGE BETWEEN UNBOUNDED PRECEDING
		AND UNBOUNDED FOLLOWING
	) AS highest_price_per_group
FROM
	training.products
INNER JOIN product_groups USING (group_id);

/* get previous price in group */
SELECT
	product_name,
	group_name,
	price,
	LAG (price, 1) OVER (
		PARTITION BY group_name
		ORDER BY
			price
	) AS prev_price,
	price - LAG (price, 1) OVER (
		PARTITION BY group_name
		ORDER BY
			price
	) AS cur_prev_diff
FROM
	training.products
INNER JOIN product_groups USING (group_id);



/*return next row price */
SELECT
	product_name,
	group_name,
	price,
	LEAD (price, 1) OVER (
		PARTITION BY group_name
		ORDER BY
			price
	) AS next_price,
	price - LEAD (price, 1) OVER (
		PARTITION BY group_name
		ORDER BY
			price
	) AS cur_next_diff
FROM
	training.products
INNER JOIN product_groups USING (group_id);